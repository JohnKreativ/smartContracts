// SPDX-License-Identifier: MIT

pragma solidity 0.8.0;

import "https://github.com/JohnKreativ/smartContracts/blob/main/interfaces/IERC20";
import "https://github.com/JohnKreativ/smartContracts/blob/main/interfaces/IUniswapV2Pair";
import "https://github.com/JohnKreativ/smartContracts/blob/main/interfaces/IUniswapV2Factory";
import "https://github.com/JohnKreativ/smartContracts/blob/main/interfaces/IUniswapV2Router01";
import "https://github.com/JohnKreativ/smartContracts/blob/main/library/SafeMath";
//import "https://github.com/JohnKreativ/smartContracts/blob/main/library/UniswapV2Library";

interface IPancakeCallee {
    function pancakeCall(address sender, uint amount0, uint amount1, bytes calldata data) external;
}


contract pArb is IPancakeCallee {
    using SafeMath for uint;
    uint deadline = block.timestamp+30;

    address private owner;
    address constant pancakeFactory = 0xBCfCcbde45cE874adCB698cC183deBcF17952812;
    address constant bakeryFactory =0x01bF7C66c6BD861915CdaaE475042d3c4BaE16A7;
    address constant bakery = 0xCDe540d7eAFE93aC5fE6233Bee57E1270D3E330F;
    address constant pcake = 0x05fF2B0DB69458A0750badebc4f9e13aDd608C7F;
    address constant BAKE = 0xE02dF9e3e622DeBdD69fb838bB799E3F168902c5;
    IUniswapV2Router01 bakeryRouter = IUniswapV2Router01(bakery);
    IUniswapV2Router01 pcakeRouter = IUniswapV2Router01(pcake);

    // enum Direction { pancakeToBakery, bakeryToPancake } 
    // struct ArbInfo {Direction direction;uint repayAmount;}
    event Log(string message, uint val);
    event pLog(string message, address val);

    constructor() {
        owner = msg.sender;
    }

    function startArb(address _tokenBorrow, uint _amount) external {
        address pair= IUniswapV2Factory(pancakeFactory).getPair(_tokenBorrow, BAKE);
        address pair2= IUniswapV2Factory(pancakeFactory).getPair(_tokenBorrow, BAKE);
        require(pair != address(0), 'This pool does not exist');

        address token0 = IUniswapV2Pair(pair).token0();
        address token1 = IUniswapV2Pair(pair).token1();
        uint amount0Out = _tokenBorrow == token0 ? _amount : 0;
        uint amount1Out = _tokenBorrow == token1 ? _amount : 0;

        // need to pass some data to trigger uniswapV2Call
        bytes memory data = abi.encode(_tokenBorrow, _amount);
        emit pLog("pancake pair",pair);
        emit pLog("bakery pair",pair2);
        emit Log("test",_amount);
          
        address pair3 = IUniswapV2Factory(pancakeFactory).getPair(token0, token1);
        emit pLog("pair address of msg sender",pair3);
        IUniswapV2Pair(pair).swap(amount0Out, amount1Out, address(this), data);
    }

    function pancakeCall(address _sender,uint _amount0,uint _amount1,bytes calldata _data) external override{
        // obtain an amout of token that you exchanged
        emit pLog("triggered contract addresss",_sender);
        uint amountToken = _amount0 == 0 ? _amount1 : _amount0;
        address token0 = IUniswapV2Pair(msg.sender).token0();
        address token1 = IUniswapV2Pair(msg.sender).token1();
        emit Log("loan received",amountToken);
  

        address pair = IUniswapV2Factory(pancakeFactory).getPair(token0, token1);
        require(msg.sender ==pair,"!No pair");
        require(_sender==address(this));
        (address tokenBorrow, uint amount) = abi.decode(_data, (address, uint));
        //require(msg.sender == UniswapV2Library.pairFor(pancakeFactory, token0, token1),'not authorized');
        require(_amount0 == 0 || _amount1 == 0);

        // if _amount0 is zero sell token1 for token0 else sell token0 for token1 as a result
        //path[0] is sell token, here token1
        address[] memory path = new address[](2);
        path[0] = _amount0 == 0 ? token1 : token0;
        path[1] = _amount0 == 0 ? token0 : token1;

        // IERC20 token that we will sell for otherToken
        IERC20 token = IERC20(_amount0 == 0 ? token1 : token0);
        token.approve(address(bakeryRouter), amountToken);

        // calculate the amount of token how much input token should be reimbursed from flashloan
        uint amountRequired = pcakeRouter.getAmountsIn(amountToken,path)[0];

        //sell on bakery by swapping token and obtain equivalent otherToken amountRequired as a result
        uint amountReceived = bakeryRouter.swapExactTokensForTokens(amountToken,amountRequired,path,msg.sender,deadline)[1];

        require(amountReceived > amountRequired,'Tokens not enough for payback'); // fail if we didn't get enough tokens
        IERC20 otherToken = IERC20(_amount0 == 0 ? token0 : token1);
        otherToken.transfer(msg.sender, amountRequired);
        otherToken.transfer(owner, amountReceived.sub(amountRequired));

        //emit Log("amount",amount);
        //emit Log("amount received from swaps",amountReceived);
        emit Log("Profit",amountReceived.sub(amountRequired));
    }

    receive() external payable{} //for transfers to contract
    fallback() external payable{} 
    
}

//msg.sender is the trigger of the function
//tx.origin is the wallet 
